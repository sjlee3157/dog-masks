class Rental < ApplicationRecord
  belongs_to :movie
  belongs_to :customer, counter_cache: :rental_count

  validates_uniqueness_of :movie, scope: :customer, conditions: -> { where.not(availability: 'true') }
end

class Customer < ApplicationRecord
  has_many :rentals, dependent: :destroy
  has_many :rented_movies, through: :rentals, source: :movies
end

class Movie < ApplicationRecord
  has_many :rentals, dependent: :nullify
  has_many :renting_customers, through: :rentals, source: :customer
end

## Schema

Customer
  t.integer "rental_count", default: 0

Movie

Rental
  t.index ["movie_id"], name: "index_rentals_on_movie_id"
  t.index ["customer_id"], name: "index_rentals_on_customer_id"


add_foreign_key "rentals", "customers"
add_foreign_key "rentals", "movies"
